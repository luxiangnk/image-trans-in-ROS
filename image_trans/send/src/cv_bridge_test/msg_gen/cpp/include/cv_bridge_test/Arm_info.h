/* Auto-generated by genmsg_cpp for file /home/wmkevin/ROS/cv_bridge_test/msg/Arm_info.msg */
#ifndef CV_BRIDGE_TEST_MESSAGE_ARM_INFO_H
#define CV_BRIDGE_TEST_MESSAGE_ARM_INFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cv_bridge_test
{
template <class ContainerAllocator>
struct Arm_info_ {
  typedef Arm_info_<ContainerAllocator> Type;

  Arm_info_()
  : current_rst1(0.0)
  , current_rst2(0.0)
  , current_rst3(0.0)
  , current_rst4(0.0)
  , current_lst1(0.0)
  , current_lst2(0.0)
  , current_lst3(0.0)
  , current_lst4(0.0)
  , current_lpx(0.0)
  , current_lpy(0.0)
  , current_lpz(0.0)
  , current_rpx(0.0)
  , current_rpy(0.0)
  , current_rpz(0.0)
  {
  }

  Arm_info_(const ContainerAllocator& _alloc)
  : current_rst1(0.0)
  , current_rst2(0.0)
  , current_rst3(0.0)
  , current_rst4(0.0)
  , current_lst1(0.0)
  , current_lst2(0.0)
  , current_lst3(0.0)
  , current_lst4(0.0)
  , current_lpx(0.0)
  , current_lpy(0.0)
  , current_lpz(0.0)
  , current_rpx(0.0)
  , current_rpy(0.0)
  , current_rpz(0.0)
  {
  }

  typedef double _current_rst1_type;
  double current_rst1;

  typedef double _current_rst2_type;
  double current_rst2;

  typedef double _current_rst3_type;
  double current_rst3;

  typedef double _current_rst4_type;
  double current_rst4;

  typedef double _current_lst1_type;
  double current_lst1;

  typedef double _current_lst2_type;
  double current_lst2;

  typedef double _current_lst3_type;
  double current_lst3;

  typedef double _current_lst4_type;
  double current_lst4;

  typedef double _current_lpx_type;
  double current_lpx;

  typedef double _current_lpy_type;
  double current_lpy;

  typedef double _current_lpz_type;
  double current_lpz;

  typedef double _current_rpx_type;
  double current_rpx;

  typedef double _current_rpy_type;
  double current_rpy;

  typedef double _current_rpz_type;
  double current_rpz;


  typedef boost::shared_ptr< ::cv_bridge_test::Arm_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cv_bridge_test::Arm_info_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Arm_info
typedef  ::cv_bridge_test::Arm_info_<std::allocator<void> > Arm_info;

typedef boost::shared_ptr< ::cv_bridge_test::Arm_info> Arm_infoPtr;
typedef boost::shared_ptr< ::cv_bridge_test::Arm_info const> Arm_infoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cv_bridge_test::Arm_info_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cv_bridge_test::Arm_info_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cv_bridge_test

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cv_bridge_test::Arm_info_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cv_bridge_test::Arm_info_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cv_bridge_test::Arm_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7a971484f1b22e03a7e98d33dd4e6ef7";
  }

  static const char* value(const  ::cv_bridge_test::Arm_info_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7a971484f1b22e03ULL;
  static const uint64_t static_value2 = 0xa7e98d33dd4e6ef7ULL;
};

template<class ContainerAllocator>
struct DataType< ::cv_bridge_test::Arm_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cv_bridge_test/Arm_info";
  }

  static const char* value(const  ::cv_bridge_test::Arm_info_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cv_bridge_test::Arm_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 current_rst1\n\
float64 current_rst2\n\
float64 current_rst3\n\
float64 current_rst4\n\
float64 current_lst1\n\
float64 current_lst2\n\
float64 current_lst3\n\
float64 current_lst4\n\
float64 current_lpx\n\
float64 current_lpy\n\
float64 current_lpz\n\
float64 current_rpx\n\
float64 current_rpy\n\
float64 current_rpz\n\
\n\
";
  }

  static const char* value(const  ::cv_bridge_test::Arm_info_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cv_bridge_test::Arm_info_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cv_bridge_test::Arm_info_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.current_rst1);
    stream.next(m.current_rst2);
    stream.next(m.current_rst3);
    stream.next(m.current_rst4);
    stream.next(m.current_lst1);
    stream.next(m.current_lst2);
    stream.next(m.current_lst3);
    stream.next(m.current_lst4);
    stream.next(m.current_lpx);
    stream.next(m.current_lpy);
    stream.next(m.current_lpz);
    stream.next(m.current_rpx);
    stream.next(m.current_rpy);
    stream.next(m.current_rpz);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Arm_info_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cv_bridge_test::Arm_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cv_bridge_test::Arm_info_<ContainerAllocator> & v) 
  {
    s << indent << "current_rst1: ";
    Printer<double>::stream(s, indent + "  ", v.current_rst1);
    s << indent << "current_rst2: ";
    Printer<double>::stream(s, indent + "  ", v.current_rst2);
    s << indent << "current_rst3: ";
    Printer<double>::stream(s, indent + "  ", v.current_rst3);
    s << indent << "current_rst4: ";
    Printer<double>::stream(s, indent + "  ", v.current_rst4);
    s << indent << "current_lst1: ";
    Printer<double>::stream(s, indent + "  ", v.current_lst1);
    s << indent << "current_lst2: ";
    Printer<double>::stream(s, indent + "  ", v.current_lst2);
    s << indent << "current_lst3: ";
    Printer<double>::stream(s, indent + "  ", v.current_lst3);
    s << indent << "current_lst4: ";
    Printer<double>::stream(s, indent + "  ", v.current_lst4);
    s << indent << "current_lpx: ";
    Printer<double>::stream(s, indent + "  ", v.current_lpx);
    s << indent << "current_lpy: ";
    Printer<double>::stream(s, indent + "  ", v.current_lpy);
    s << indent << "current_lpz: ";
    Printer<double>::stream(s, indent + "  ", v.current_lpz);
    s << indent << "current_rpx: ";
    Printer<double>::stream(s, indent + "  ", v.current_rpx);
    s << indent << "current_rpy: ";
    Printer<double>::stream(s, indent + "  ", v.current_rpy);
    s << indent << "current_rpz: ";
    Printer<double>::stream(s, indent + "  ", v.current_rpz);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CV_BRIDGE_TEST_MESSAGE_ARM_INFO_H

