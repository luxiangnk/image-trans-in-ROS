/* Auto-generated by genmsg_cpp for file /home/wmkevin/ROS/cv_bridge_test/msg/Pic.msg */
#ifndef CV_BRIDGE_TEST_MESSAGE_PIC_H
#define CV_BRIDGE_TEST_MESSAGE_PIC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cv_bridge_test
{
template <class ContainerAllocator>
struct Pic_ {
  typedef Pic_<ContainerAllocator> Type;

  Pic_()
  : pic()
  {
  }

  Pic_(const ContainerAllocator& _alloc)
  : pic(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pic_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  pic;


  typedef boost::shared_ptr< ::cv_bridge_test::Pic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cv_bridge_test::Pic_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Pic
typedef  ::cv_bridge_test::Pic_<std::allocator<void> > Pic;

typedef boost::shared_ptr< ::cv_bridge_test::Pic> PicPtr;
typedef boost::shared_ptr< ::cv_bridge_test::Pic const> PicConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cv_bridge_test::Pic_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cv_bridge_test::Pic_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cv_bridge_test

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cv_bridge_test::Pic_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cv_bridge_test::Pic_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cv_bridge_test::Pic_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b029feab08f2c4877092228da5ee6702";
  }

  static const char* value(const  ::cv_bridge_test::Pic_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb029feab08f2c487ULL;
  static const uint64_t static_value2 = 0x7092228da5ee6702ULL;
};

template<class ContainerAllocator>
struct DataType< ::cv_bridge_test::Pic_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cv_bridge_test/Pic";
  }

  static const char* value(const  ::cv_bridge_test::Pic_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cv_bridge_test::Pic_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string pic\n\
\n\
";
  }

  static const char* value(const  ::cv_bridge_test::Pic_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cv_bridge_test::Pic_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pic);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Pic_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cv_bridge_test::Pic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cv_bridge_test::Pic_<ContainerAllocator> & v) 
  {
    s << indent << "pic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pic);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CV_BRIDGE_TEST_MESSAGE_PIC_H

