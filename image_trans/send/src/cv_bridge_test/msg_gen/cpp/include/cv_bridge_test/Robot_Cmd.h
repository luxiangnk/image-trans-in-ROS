/* Auto-generated by genmsg_cpp for file /home/wmkevin/ROS/cv_bridge_test/msg/Robot_Cmd.msg */
#ifndef CV_BRIDGE_TEST_MESSAGE_ROBOT_CMD_H
#define CV_BRIDGE_TEST_MESSAGE_ROBOT_CMD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cv_bridge_test
{
template <class ContainerAllocator>
struct Robot_Cmd_ {
  typedef Robot_Cmd_<ContainerAllocator> Type;

  Robot_Cmd_()
  : cmd_id(0)
  , cmd_flag(0.0)
  , hand_num(0)
  , joint_num(0)
  , target_rst1(0.0)
  , target_rst2(0.0)
  , target_rst3(0.0)
  , target_rst4(0.0)
  , target_lst1(0.0)
  , target_lst2(0.0)
  , target_lst3(0.0)
  , target_lst4(0.0)
  , target_positionx()
  , target_positiony()
  , target_positionst()
  {
  }

  Robot_Cmd_(const ContainerAllocator& _alloc)
  : cmd_id(0)
  , cmd_flag(0.0)
  , hand_num(0)
  , joint_num(0)
  , target_rst1(0.0)
  , target_rst2(0.0)
  , target_rst3(0.0)
  , target_rst4(0.0)
  , target_lst1(0.0)
  , target_lst2(0.0)
  , target_lst3(0.0)
  , target_lst4(0.0)
  , target_positionx(_alloc)
  , target_positiony(_alloc)
  , target_positionst(_alloc)
  {
  }

  typedef int32_t _cmd_id_type;
  int32_t cmd_id;

  typedef double _cmd_flag_type;
  double cmd_flag;

  typedef int32_t _hand_num_type;
  int32_t hand_num;

  typedef int32_t _joint_num_type;
  int32_t joint_num;

  typedef double _target_rst1_type;
  double target_rst1;

  typedef double _target_rst2_type;
  double target_rst2;

  typedef double _target_rst3_type;
  double target_rst3;

  typedef double _target_rst4_type;
  double target_rst4;

  typedef double _target_lst1_type;
  double target_lst1;

  typedef double _target_lst2_type;
  double target_lst2;

  typedef double _target_lst3_type;
  double target_lst3;

  typedef double _target_lst4_type;
  double target_lst4;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _target_positionx_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  target_positionx;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _target_positiony_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  target_positiony;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _target_positionst_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  target_positionst;


  typedef boost::shared_ptr< ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cv_bridge_test::Robot_Cmd_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Robot_Cmd
typedef  ::cv_bridge_test::Robot_Cmd_<std::allocator<void> > Robot_Cmd;

typedef boost::shared_ptr< ::cv_bridge_test::Robot_Cmd> Robot_CmdPtr;
typedef boost::shared_ptr< ::cv_bridge_test::Robot_Cmd const> Robot_CmdConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cv_bridge_test

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cv_bridge_test::Robot_Cmd_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d1592935135b0c5843f583423d639699";
  }

  static const char* value(const  ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd1592935135b0c58ULL;
  static const uint64_t static_value2 = 0x43f583423d639699ULL;
};

template<class ContainerAllocator>
struct DataType< ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cv_bridge_test/Robot_Cmd";
  }

  static const char* value(const  ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32   cmd_id\n\
float64 cmd_flag\n\
int32   hand_num\n\
int32   joint_num\n\
float64 target_rst1\n\
float64 target_rst2\n\
float64 target_rst3\n\
float64 target_rst4\n\
float64 target_lst1\n\
float64 target_lst2\n\
float64 target_lst3\n\
float64 target_lst4\n\
float64[] target_positionx\n\
float64[] target_positiony\n\
float64[] target_positionst\n\
\n\
\n\
";
  }

  static const char* value(const  ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cmd_id);
    stream.next(m.cmd_flag);
    stream.next(m.hand_num);
    stream.next(m.joint_num);
    stream.next(m.target_rst1);
    stream.next(m.target_rst2);
    stream.next(m.target_rst3);
    stream.next(m.target_rst4);
    stream.next(m.target_lst1);
    stream.next(m.target_lst2);
    stream.next(m.target_lst3);
    stream.next(m.target_lst4);
    stream.next(m.target_positionx);
    stream.next(m.target_positiony);
    stream.next(m.target_positionst);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Robot_Cmd_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cv_bridge_test::Robot_Cmd_<ContainerAllocator> & v) 
  {
    s << indent << "cmd_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd_id);
    s << indent << "cmd_flag: ";
    Printer<double>::stream(s, indent + "  ", v.cmd_flag);
    s << indent << "hand_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hand_num);
    s << indent << "joint_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.joint_num);
    s << indent << "target_rst1: ";
    Printer<double>::stream(s, indent + "  ", v.target_rst1);
    s << indent << "target_rst2: ";
    Printer<double>::stream(s, indent + "  ", v.target_rst2);
    s << indent << "target_rst3: ";
    Printer<double>::stream(s, indent + "  ", v.target_rst3);
    s << indent << "target_rst4: ";
    Printer<double>::stream(s, indent + "  ", v.target_rst4);
    s << indent << "target_lst1: ";
    Printer<double>::stream(s, indent + "  ", v.target_lst1);
    s << indent << "target_lst2: ";
    Printer<double>::stream(s, indent + "  ", v.target_lst2);
    s << indent << "target_lst3: ";
    Printer<double>::stream(s, indent + "  ", v.target_lst3);
    s << indent << "target_lst4: ";
    Printer<double>::stream(s, indent + "  ", v.target_lst4);
    s << indent << "target_positionx[]" << std::endl;
    for (size_t i = 0; i < v.target_positionx.size(); ++i)
    {
      s << indent << "  target_positionx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_positionx[i]);
    }
    s << indent << "target_positiony[]" << std::endl;
    for (size_t i = 0; i < v.target_positiony.size(); ++i)
    {
      s << indent << "  target_positiony[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_positiony[i]);
    }
    s << indent << "target_positionst[]" << std::endl;
    for (size_t i = 0; i < v.target_positionst.size(); ++i)
    {
      s << indent << "  target_positionst[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_positionst[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CV_BRIDGE_TEST_MESSAGE_ROBOT_CMD_H

